---
import LayoutBare from "../../layouts/LayoutBare.astro";
import "../../assets/styles/docs.scss";
import "../../assets/styles/main.scss";
import ArrowRightIcon from "../../components/icons/ArrowRightIcon.astro";

interface ContentTitle {
  type: "title";
  value: string;
}

interface ContentLink {
  type: "link";
  value: string;
  toSlug?: string;
}

interface ContentDrop {
  type: "drop";
  value: string;
  children: ContentItem[];
}

type ContentItem = ContentTitle | ContentLink | ContentDrop;

interface Page {
  slug: string | undefined;
  contents: ContentItem[];
}

const pages: Page[] = [
  {
    slug: undefined,
    contents: [
      {
        type: "title",
        value: "Overview",
      },
      {
        type: "link",
        toSlug: undefined,
        value: "Overview",
      },
      {
        type: "drop",
        value: "Overview 2",
        children: [
          {
            type: "link",
            toSlug: "2",
            value: "Overview",
          },
          {
            type: "link",
            toSlug: "4",
            value: "Overview",
          },
          {
            type: "drop",
            value: "Overview 2",
            children: [
              {
                type: "link",
                toSlug: "2",
                value: "Overview",
              },
              {
                type: "link",
                toSlug: "4",
                value: "Overview",
              },
            ],
          },
        ],
      },
      {
        type: "link",
        toSlug: "3",
        value: "Overview 3",
      },
    ],
  },
];

const { slug } = Astro.params;
const page = pages.find((page) => page.slug === slug);
if (!page) return Astro.redirect("/404");
---

<script>
  const sleep = (ms: number) =>
    new Promise((resolve) => setTimeout(resolve, ms));

  const parsePath = (path: string) => {
    return path.endsWith("/") ? path.slice(0, path.length - 1) : path;
  };

  let path = parsePath(window.location.pathname);
  const linkEls = document.querySelectorAll(".contents__link");
  linkEls.forEach((v) => {
    const elPath = parsePath(v.getAttribute("href") ?? "/");
    if (elPath === path) v.classList.add("active");
  });

  const els = document.getElementsByClassName("contents__drop");

  for (let el of els) {
    el = el as HTMLElement;

    const elButton: HTMLElement | null = el.querySelector("button");
    if (!elButton) continue;
    const dropContainer: HTMLElement | null =
      el.querySelector(".drop__container");
    if (!dropContainer) continue;
    const dropContent: HTMLElement | null =
      dropContainer.querySelector(".drop__content");
    if (!dropContent) continue;

    const height = dropContent.getBoundingClientRect().height;

    elButton.addEventListener("click", async () => {
      if (el.classList.contains("open")) {
        dropContainer.style.height = height + "px";
        await sleep(1);
        dropContainer.style.height = "0px";
        el.classList.remove("open");
        return;
      }
      el.classList.add("open");
      dropContainer.style.height = height + "px";
      await sleep(75);
      dropContainer.style.height = "auto";
    });
  }
</script>

<LayoutBare
  title="Documentation | braden ðŸŒ¸"
  description="Self-taught full stack developer, turning peoples ideas into products."
>
  <header class="header">
    <a href="/" class="header__logo"><h1>bradn</h1></a>
  </header>

  <main class="no-marg doc-table">
    <aside class="contents-table">
      <nav>
        {
          page.contents.map((v) => {
            function renderData(data: ContentItem) {
              switch (data.type) {
                case "title": {
                  return <span class="contents__title">{data.value}</span>;
                }
                case "link": {
                  return (
                    <a
                      class="contents__link"
                      href={
                        "/docs/" +
                        (data.toSlug === undefined ? "" : data.toSlug)
                      }
                    >
                      {data.value}
                    </a>
                  );
                }
                case "drop": {
                  return (
                    <div class="contents__drop">
                      <button class="contents__link icon">
                        <ArrowRightIcon /> <span>{data.value}</span>
                      </button>
                      <div class="drop__container">
                        <div class="drop__content">
                          {data.children.map((v) => renderData(v))}
                        </div>
                      </div>
                    </div>
                  );
                }
                default: {
                  return;
                }
              }
            }

            return renderData(v);
          })
        }
      </nav>
    </aside>
    <div class="content"></div>
    <aside class="page-contents"></aside>
  </main>
</LayoutBare>
